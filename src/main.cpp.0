#include <ros/ros.h>
#include <image_transport/image_transport.h>
#include <cv_bridge/cv_bridge.h>
#include <sensor_msgs/image_encodings.h>
#include <iostream>
// #include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>
// #include <opencv2/calib3d/calib3d.hpp>
#include <sstream>
#include <iomanip>

static int im_num = 0;

static std::string enc = sensor_msgs::image_encodings::BGR8;

// static double K[3][3] = {  
//		{150, 0, 326.427986484} ,   /*  initializers for row indexed by 0 */
//		{0, 150, 235.43082085} ,   /*  initializers for row indexed by 1 */
//		{0, 0, 1}   /*  initializers for row indexed by 2 */
//		};

// static double D[4] = {-0.081749373, 0.189767531, 0.000098899, 0.000046782};

		
// static cv::Mat K = (cv::Mat_<double>(3,3) << 150, 0, 326.427986484, 0, 150, 235.43082085, 0, 0, 1);

// static cv::Mat D = (cv::Mat_<double>(4,1) << -0.081749373, 0.189767531, 0.000098899, 0.000046782);

static cv::Mat K = (cv::Mat_<double>(3,3) << 150, 0, 326.427986484, 0, 150, 235.43082085, 0, 0, 1);

static cv::Mat D = (cv::Mat_<double>(4,1) << -0.081749373, 0.189767531, 0.000098899, 0.000046782);




  void imageCb(const sensor_msgs::ImageConstPtr& msg)
  {
    cv_bridge::CvImageConstPtr cv_ptr;
    
    // std::stringstream sstring;
    
    std::string path = "/media/michele/SAMSUNG/bagfiles/fluence_images";
    
    // sstring << path << "/" << "Image" << std::setfill('0') << std::setw(5) << im_num << ".bmp";
    im_num++;
    
    try
    {
      cv_ptr = cv_bridge::toCvShare(msg, enc);
    }
    catch (cv_bridge::Exception& e)
    {
      ROS_ERROR("cv_bridge exception: %s", e.what());
      return;
    }
    
    // undistortion
     // cv::Mat C = (cv::Mat_<double>(3,3) << 0, -1, 0, -1, 5, -1, 0, -1, 0);
     
    // cv::Mat cameraMatrix;
    // cv::Mat distCoeffs;
    cv::Mat rectified_im;
    cv::undistort( cv_ptr->image, rectified_im, K, D);
    
    // cv::fisheye::undistortImage( cv_ptr->image, rectified_im, K, D, );
    

    // Update GUI Window
    cv::imshow("Image window", cv_ptr->image);
    cv::waitKey(3);
    cv::imshow("Undistorted", rectified_im);
    cv::waitKey(3);

    // cv::imwrite( sstring.str(), cv_ptr->image );
    
  }

int main(int argc, char** argv)
{
  ros::init(argc, argv, "frame_extractor");
  // ImageConverter ic;
  
  ros::NodeHandle nh_;
  image_transport::ImageTransport it_(nh_);
  image_transport::Subscriber image_sub_;
  
  image_sub_ = it_.subscribe("/stereo/left/image_raw", 1, &imageCb);
  
  ROS_INFO("CIAO");
  
  ROS_INFO("Camera Matrix: ");
  
  std::cout << K << std::endl;
  
  std::cout << D << std::endl;
  
  // fflush(std::cout);
   
  cv::namedWindow("Image window");
  cv::namedWindow("Undistorted");
  // cv::waitKey(3);
  
  ros::spin();
  
  cv::destroyWindow("Image window");
  cv::destroyWindow("Undistorted");
  
  return 0;
}

